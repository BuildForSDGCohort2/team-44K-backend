//user registration trash

users.route('/register').post(



    (req, res) => {
        
        const userData = {

            username   : req.body.username,
            email      : req.body.email,
            age        : req.body.age,
            password   : req.body.password,
            
        }

        User.find({
            where: {
                email : req.body.email
            }
        }).exec()
        .then(user => {
            if(user){
                 bcrypt.hash(req.body.password, 10, (err,hash)=>{
                userData.password = hash
              User.create({userData})
                .then(user => {
                    res.json({
                        status : user.email + 'registered'
                    })
                })
                .catch(err=>{
                    res.send('error : '+err)
                })
            })
        } else {
            res.json({error : "User already exists" })
        }
        
    })
      .catch(err => {
          res.send('error : '+ err)
      })

    }
)

//login
const { email, password } = req.body;
    try {
      let user = await User.findOne({
        email
      });
      if (!user)
        return res.status(400).json({
          message: "User Not Exist"
        });

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch)
        return res.status(400).json({
          message: "Incorrect Password !"
        });

      const payload = {
        user: {
          id: user.id
        }
      };

      jwt.sign(
        payload,
        "randomString",
        {
          expiresIn: 3600
        },
        (err, token) => {
          if (err) throw err;
          res.status(200).json({
            token
          });
        }
      );
    } catch (e) {
      console.error(e);
      res.status(500).json({
        message: "Server Error"
      });
    }
  }


  //login.trash

  User.findOne({email: req.body.email,})
    .then((user) => {
      if (user) {
        if (bcrypt.compareSync(req.body.password, user.password)) {
          let token = jwt.sign(user.dataValues, process.env.SECRET_KEY, {
            expiresIn: 3600,
          });
          res.status(200).json(token);
          res.send(token);
        }
      } 
      else {
        res.status(400).json({ error: "User does not exist" });
      }
    })
    .catch((err) => {
      console.error(err);
      res.status(400).json({ error: err });
    });
});